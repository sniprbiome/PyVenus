//----------------------------------------------------------------------------------------
// Copyright (C) by HAMILTON Bonaduz AG, CH-7402 Bonaduz.
// All rights reserved.
//
// Project              : HSL Extension Framework
// Description          : Framework library with array functions
//
// Software Version     : 4.3
//
// Revision history:
// - Oliver Funke   2010.11.02   library created
//
//----------------------------------------------------------------------------------------

#ifndef __HSLEXTENSIONS_ARRAY__
#define __HSLEXTENSIONS_ARRAY__ 1

//============================== includes ==============================
#ifndef __HSLEXTENSIONS_FRAMEWORK__
   #include "HSLExtensions/Framework/HSLExtensionsFramework.hsl"
#endif

#ifndef __HSLEXTENSIONS_FRAMEWORK_ENUMS__
   #include "HSLExtensions/Framework/Enumerators.hsl"
#endif

#ifndef __HSLStrLib_hsl__
   #include "HSLStrLib.hsl"
#endif


//============================== HSLExtension ==============================
namespace HSLExtensions
{
   //============================== Array ==============================
   namespace Array
   {
      //------------------------------------------------------
      // Get whether the array contains only integer values
      // NOTE: if the array is empty the function returns 'false'
      //
      // [in] i_arrValues
      // [return] 'true' if value is of type integer, otherwise 'false'
      //------------------------------------------------------
      function IsIntegerArray(variable i_arrValues[]) variable
      {
         variable strFunctionName(GetFunctionName());
         variable blnIsIntegerArray;
         
         //trace input
         HSLExtensions::Framework::Trace::FunctionInputArrayTrace(strFunctionName, "i_arrValues", i_arrValues);
         
         //is integer array
         blnIsIntegerArray = HSLExtensions::Framework::Types::IsIntegerArray(i_arrValues);

         //trace output
         HSLExtensions::Framework::Trace::FunctionResultParameterTrace(strFunctionName, blnIsIntegerArray);

         return(blnIsIntegerArray);
      }
  
      //------------------------------------------------------
      // Get whether the array contains only string values
      // NOTE: if the array is empty the function returns 'false'
      //
      // [in] i_arrValues
      // [return] 'true' if value is of type string, otherwise 'false'
      //------------------------------------------------------
      function IsStringArray(variable i_arrValues[]) variable
      {
         variable strFunctionName(GetFunctionName());
         variable blnIsStringArray;
         
         //trace input
         HSLExtensions::Framework::Trace::FunctionInputArrayTrace(strFunctionName, "i_arrValues", i_arrValues);
         
         //is string array
         blnIsStringArray = HSLExtensions::Framework::Types::IsStringArray(i_arrValues);

         //trace output
         HSLExtensions::Framework::Trace::FunctionResultParameterTrace(strFunctionName, blnIsStringArray);

         return(blnIsStringArray);
      }

      //------------------------------------------------------
      // Get whether the array contains only float values
      // NOTE: if the array is empty the function returns 'false'
      //
      // [in] i_arrValues
      // [return] 'true' if value is of type float, otherwise 'false'
      //------------------------------------------------------
      function IsFloatArray(variable i_arrValues[]) variable
      {
         variable strFunctionName(GetFunctionName());
         variable blnIsFloatArray;
         
         //trace input
         HSLExtensions::Framework::Trace::FunctionInputArrayTrace(strFunctionName, "i_arrValues", i_arrValues);
         
         //is float array
         blnIsFloatArray = HSLExtensions::Framework::Types::IsFloatArray(i_arrValues);

         //trace output
         HSLExtensions::Framework::Trace::FunctionResultParameterTrace(strFunctionName, blnIsFloatArray);

         return(blnIsFloatArray);
      }

      //------------------------------------------------------
      // Get whether the array contains only boolean values
      // NOTE: if the array is empty the function returns 'false'
      //
      // [in] i_arrValues
      // [return] 'true' if value is of type boolean, otherwise 'false'
      //------------------------------------------------------
      function IsBooleanArray(variable i_arrValues[]) variable
      {
         variable strFunctionName(GetFunctionName());
         variable blnIsBooleanArray;
         
         //trace input
         HSLExtensions::Framework::Trace::FunctionInputArrayTrace(strFunctionName, "i_arrValues", i_arrValues);
         
         //is boolean array
         blnIsBooleanArray = HSLExtensions::Framework::Types::IsBooleanArray(i_arrValues);

         //trace output
         HSLExtensions::Framework::Trace::FunctionResultParameterTrace(strFunctionName, blnIsBooleanArray);

         return(blnIsBooleanArray);
      }

      //------------------------------------------------------
      // Get whether the array is empty
      //
      // [in] i_arrValues
      // [return] 'true' if array is empty, otherwise 'false'
      //------------------------------------------------------
      function IsEmpty(variable i_arrValues[]) variable
      {
         variable strFunctionName(GetFunctionName());
         variable intSize;
         variable blnIsEmpty;

         //trace input
         HSLExtensions::Framework::Trace::FunctionInputArrayTrace(strFunctionName, "i_arrValues", i_arrValues);

         //is empty
         intSize = i_arrValues.GetSize();

         if(intSize == 0)
         {
            blnIsEmpty = hslTrue;
         }
         else
         {
            blnIsEmpty = hslFalse;
         }

         //trace output
         HSLExtensions::Framework::Trace::FunctionResultParameterTrace(strFunctionName, blnIsEmpty);

         return(blnIsEmpty);
      }

      //------------------------------------------------------
      // Creates a copy of the array
      //
      // [in] i_arrValues
      // [return] 'true' if array is empty, otherwise 'false'
      //------------------------------------------------------
      function Copy(variable i_arrValues[]) variable[]
      {
         variable strFunctionName(GetFunctionName());
         variable intSize;
         variable arrCopy[];
         variable i;

         //init
         arrCopy.SetSize(0);

         //trace input
         HSLExtensions::Framework::Trace::FunctionInputArrayTrace(strFunctionName, "i_arrValues", i_arrValues);
         
         //copy
         intSize = i_arrValues.GetSize();

         for(i=0; i<intSize; i++)
         {
            arrCopy.AddAsLast(i_arrValues.GetAt(i));
         }
         
         //trace output
         HSLExtensions::Framework::Trace::FunctionResultArrayTrace(strFunctionName, arrCopy);

         return(arrCopy);
      }

      //------------------------------------------------------
      // Concats the two arrays and returns the new array
      //
      // [in] i_arrValuesA: first array
      // [in] i_arrValuesB: second array
      // [return] 'true' if array is empty, otherwise 'false'
      //------------------------------------------------------
      function Concat(variable i_arrValuesA[], variable i_arrValuesB[]) variable[]
      {
         variable strFunctionName(GetFunctionName());
         variable arrConcat[];
         variable intSize;
         variable i;
         
         //init
         arrConcat.SetSize(0);

         //trace input
         HSLExtensions::Framework::Trace::FunctionInputArrayTrace(strFunctionName, "i_arrValuesA", i_arrValuesA);
         HSLExtensions::Framework::Trace::FunctionInputArrayTrace(strFunctionName, "i_arrValuesB", i_arrValuesB);

         //copy first array
         arrConcat = Copy(i_arrValuesA);

         //add second array
         intSize = i_arrValuesB.GetSize();

         for(i=0; i<intSize; i++)
         {
            arrConcat.AddAsLast(i_arrValuesB.GetAt(i));
         }

         //trace output
         HSLExtensions::Framework::Trace::FunctionResultArrayTrace(strFunctionName, arrConcat);
         
         return(arrConcat);
      }

      //------------------------------------------------------
      // Appends the second array to the first array
      // NOTE: the resulting array is the first array, no return value exist
      //
      // [in/out] io_arrValuesA: first array, which is also the rsulting array
      // [in] i_arrValuesB: second array
      // [return] -
      //------------------------------------------------------
      function Append(variable& io_arrValuesA[], variable i_arrValuesB[]) void
      {
         variable strFunctionName(GetFunctionName());
         variable intSize;
         variable i;

         //trace input
         HSLExtensions::Framework::Trace::FunctionInputArrayTrace(strFunctionName, "io_arrValuesA", io_arrValuesA);
         HSLExtensions::Framework::Trace::FunctionInputArrayTrace(strFunctionName, "i_arrValuesB", i_arrValuesB);

         //add second array
         intSize = i_arrValuesB.GetSize();

         for(i=0; i<intSize; i++)
         {
            io_arrValuesA.AddAsLast(i_arrValuesB.GetAt(i));
         }

         //trace output
         HSLExtensions::Framework::Trace::FunctionOutputArrayTrace(strFunctionName, "io_arrValuesA", io_arrValuesA);
      }

      //------------------------------------------------------
      // Converts the array to an array with string values
      //
      // [in] i_arrValues: array to convert
      // [return] converted array
      //------------------------------------------------------
      function ConvertToStringArray(variable i_arrValues[]) variable[]
      {
         variable strFunctionName(GetFunctionName());
         variable arrConverted[];
         variable intSize;
         variable i;

         //init
         arrConverted.SetSize(0);

         //trace input
         HSLExtensions::Framework::Trace::FunctionInputArrayTrace(strFunctionName, "i_arrValues", i_arrValues);
         
         //convert
         intSize = i_arrValues.GetSize();

         for(i=0; i<intSize; i++)
         {
            arrConverted.AddAsLast(HSLExtensions::Framework::Converter::ConvertToString(i_arrValues.GetAt(i)));
         }

         //trace output
         HSLExtensions::Framework::Trace::FunctionResultArrayTrace(strFunctionName, arrConverted);
         
         return(arrConverted);
      }

      //------------------------------------------------------
      // Converts the array to an array with integer values
      // NOTE: if it is not possible to convert one or more of the values the function returns an empty array and 'o_blnSuccessfulConverted' is 'false'
      //
      // [in] i_arrValues: array to convert
      // [out] o_blnSuccessfulConverted: 'true' if conversion was successful, otherwise 'false'
      // [return] converted array, or empty array if an error occurs
      //------------------------------------------------------
      function ConvertToIntegerArray(variable i_arrValues[], variable& o_blnSuccessfulConverted) variable[]
      {
         variable strFunctionName(GetFunctionName());
         variable arrConverted[];
         variable intSize;
         variable i;
         variable varActualValue;

         //init
         arrConverted.SetSize(0);
         o_blnSuccessfulConverted = hslFalse;

         //trace input
         HSLExtensions::Framework::Trace::FunctionInputArrayTrace(strFunctionName, "i_arrValues", i_arrValues);
         
         //convert
         intSize = i_arrValues.GetSize();

         for(i=0; i<intSize; i++)
         {
            varActualValue = HSLExtensions::Framework::Converter::ConvertToInteger(i_arrValues.GetAt(i), o_blnSuccessfulConverted);

            if(o_blnSuccessfulConverted == hslFalse)
            {
               arrConverted.SetSize(0);

               HSLExtensions::Framework::Trace::FunctionOutputParameterTrace(strFunctionName, "o_blnSuccessfulConverted", o_blnSuccessfulConverted);
               HSLExtensions::Framework::Trace::FunctionResultArrayTrace(strFunctionName, arrConverted);
               return(arrConverted);
            }

            arrConverted.AddAsLast(varActualValue);
         }

         //return successful
         o_blnSuccessfulConverted = hslTrue;

         HSLExtensions::Framework::Trace::FunctionOutputParameterTrace(strFunctionName, "o_blnSuccessfulConverted", o_blnSuccessfulConverted);
         HSLExtensions::Framework::Trace::FunctionResultArrayTrace(strFunctionName, arrConverted);

         return(arrConverted);
      }

      //------------------------------------------------------
      // Converts the array to an array with float values
      // NOTE: if it is not possible to convert one or more of the values the function returns an empty array and 'o_blnSuccessfulConverted' is 'false'
      //
      // [in] i_arrValues: array to convert
      // [out] o_blnSuccessfulConverted: 'true' if conversion was successful, otherwise 'false'
      // [return] converted array, or empty array if an error occurs
      //------------------------------------------------------
      function ConvertToFloatArray(variable i_arrValues[], variable& o_blnSuccessfulConverted) variable[]
      {
         variable strFunctionName(GetFunctionName());
         variable arrConverted[];
         variable intSize;
         variable i;
         variable varActualValue;

         //init
         arrConverted.SetSize(0);
         o_blnSuccessfulConverted = hslFalse;
         
         //trace input
         HSLExtensions::Framework::Trace::FunctionInputArrayTrace(strFunctionName, "i_arrValues", i_arrValues);

         //convert
         intSize = i_arrValues.GetSize();

         for(i=0; i<intSize; i++)
         {
            varActualValue = HSLExtensions::Framework::Converter::ConvertToFloat(i_arrValues.GetAt(i), o_blnSuccessfulConverted);

            if(o_blnSuccessfulConverted == hslFalse)
            {
               arrConverted.SetSize(0);

               HSLExtensions::Framework::Trace::FunctionOutputParameterTrace(strFunctionName, "o_blnSuccessfulConverted", o_blnSuccessfulConverted);
               HSLExtensions::Framework::Trace::FunctionResultArrayTrace(strFunctionName, arrConverted);
               return(arrConverted);
            }

            arrConverted.AddAsLast(varActualValue);
         }

         //return successful
         o_blnSuccessfulConverted = hslTrue;

         HSLExtensions::Framework::Trace::FunctionOutputParameterTrace(strFunctionName, "o_blnSuccessfulConverted", o_blnSuccessfulConverted);
         HSLExtensions::Framework::Trace::FunctionResultArrayTrace(strFunctionName, arrConverted);
         return(arrConverted);
      }

      //------------------------------------------------------
      // Converts the array to an array with boolean values
      // NOTE: if it is not possible to convert one or more of the values the function returns an empty array and 'o_blnSuccessfulConverted' is 'false'
      //
      // [in] i_arrValues: array to convert
      // [out] o_blnSuccessfulConverted: 'true' if conversion was successful, otherwise 'false'
      // [return] converted array, or empty array if an error occurs
      //------------------------------------------------------
      function ConvertToBooleanArray(variable i_arrValues[], variable& o_blnSuccessfulConverted) variable[]
      {
         variable strFunctionName(GetFunctionName());
         variable arrConverted[];
         variable intSize;
         variable i;
         variable varActualValue;

         //init
         arrConverted.SetSize(0);
         o_blnSuccessfulConverted = hslFalse;

         //trace input
         HSLExtensions::Framework::Trace::FunctionInputArrayTrace(strFunctionName, "i_arrValues", i_arrValues);
         
         //convert
         intSize = i_arrValues.GetSize();

         for(i=0; i<intSize; i++)
         {
            varActualValue = HSLExtensions::Framework::Converter::ConvertToBoolean(i_arrValues.GetAt(i), o_blnSuccessfulConverted);

            if(o_blnSuccessfulConverted == hslFalse)
            {
               arrConverted.SetSize(0);

               HSLExtensions::Framework::Trace::FunctionOutputParameterTrace(strFunctionName, "o_blnSuccessfulConverted", o_blnSuccessfulConverted);
               HSLExtensions::Framework::Trace::FunctionResultArrayTrace(strFunctionName, arrConverted);
               return(arrConverted);
            }

            arrConverted.AddAsLast(varActualValue);
         }

         //return successful
         o_blnSuccessfulConverted = hslTrue;

         HSLExtensions::Framework::Trace::FunctionOutputParameterTrace(strFunctionName, "o_blnSuccessfulConverted", o_blnSuccessfulConverted);
         HSLExtensions::Framework::Trace::FunctionResultArrayTrace(strFunctionName, arrConverted);
         return(arrConverted);
      }

      //---------------------------------------------------------
      // Determines whether an array contains a value
      // NOTE: all data types are supported
      //
      // [in] i_arrValues: array with values
      // [in] i_varValue: value to find
      // [return] 'true' if the value exists in the array, otherwise 'false'
      //---------------------------------------------------------
      function ContainsValue(variable i_arrValues[], variable i_varValue) variable
      { 
         variable strFunctionName(GetFunctionName());
         variable i;
         variable intSize;
         variable intValueType;
         variable intActualElementType;
         variable varActualElement;

         //trace input
         HSLExtensions::Framework::Trace::FunctionInputArrayTrace(strFunctionName, "i_arrValues", i_arrValues);
         HSLExtensions::Framework::Trace::FunctionInputParameterTrace(strFunctionName, "i_varValue", i_varValue);
         
         //contains value?
         intSize = i_arrValues.GetSize();

         intValueType = HSLExtensions::Framework::Types::GetValueType(i_varValue);


         for(i=0; i<intSize; i++)
         {
            varActualElement = i_arrValues.GetAt(i);
            
            intActualElementType = HSLExtensions::Framework::Types::GetValueType(varActualElement);

            if(intValueType == intActualElementType)
            {
               if(intValueType == HSLExtensions::Framework::Enumerators::Type::Null)
               {
                  HSLExtensions::Framework::Trace::FunctionResultParameterTrace(strFunctionName, hslTrue);
                  return(hslTrue);
               }
               else if(i_varValue == varActualElement)
               {
                  HSLExtensions::Framework::Trace::FunctionResultParameterTrace(strFunctionName, hslTrue);
                  return(hslTrue);
               }
            }
         }
         
         HSLExtensions::Framework::Trace::FunctionResultParameterTrace(strFunctionName, hslFalse);
         return(hslFalse);
      }

      //---------------------------------------------------------
      // Searches the value inside the array and returns an array with all found positions
      // NOTE: the found positions are 1-based 
      //
      // [in] i_arrValues: array with values
      // [in] i_varValue: value to find
      // [return] array with all found positions or empty array if the value is not in the array
      //---------------------------------------------------------
      function FindValue(variable i_arrValues[], variable i_varValue) variable[]
      { 
         variable strFunctionName(GetFunctionName());
         variable i;
         variable intSize;
         variable intValueType;
         variable intActualElementType;
         variable varActualElement;
         variable arrPositionsFound[];

         //trace input
         HSLExtensions::Framework::Trace::FunctionInputArrayTrace(strFunctionName, "i_arrValues", i_arrValues);
         HSLExtensions::Framework::Trace::FunctionInputParameterTrace(strFunctionName, "i_varValue", i_varValue);

         //find value
         arrPositionsFound.SetSize(0);

         intSize = i_arrValues.GetSize();

         intValueType = HSLExtensions::Framework::Types::GetValueType(i_varValue);

         for(i=0; i<intSize; i++)
         {
            varActualElement = i_arrValues.GetAt(i);
            
            intActualElementType = HSLExtensions::Framework::Types::GetValueType(varActualElement);

            if(intValueType == intActualElementType)
            {
               if(intValueType == HSLExtensions::Framework::Enumerators::Type::Null)
               {
                  arrPositionsFound.AddAsLast(i+1);
               }
               else if(i_varValue == varActualElement)
               {
                  arrPositionsFound.AddAsLast(i+1);
               }
            }
         }
         
         HSLExtensions::Framework::Trace::FunctionResultArrayTrace(strFunctionName, arrPositionsFound);
         return(arrPositionsFound);
      }

      //---------------------------------------------------------
      // Check whether the array contains values more than one time
      //
      // [in] i_arrValues           - array with values
      // [return] array with all elements which are found more than one time in the array
      //---------------------------------------------------------
      function ContainsDuplicates(variable i_arrValues[]) variable[]
      {
         variable strFunctionName(GetFunctionName());
         variable arrDoubleValues[];
         variable i;

         variable intSizeInputArray;
         variable intSizePositionsArray;

         variable arrPositions[];
         variable varvarActualValue;

         //init
         arrDoubleValues.SetSize(0);     
         
         //trace input
         HSLExtensions::Framework::Trace::FunctionInputArrayTrace(strFunctionName, "i_arrValues", i_arrValues);  

         //search double values
         intSizeInputArray = i_arrValues.GetSize();  

         for(i=0; i<(intSizeInputArray-1); i++)
         {
            //get all positions of this value
            varvarActualValue = i_arrValues.GetAt(i);

            arrPositions = FindValue(i_arrValues, varvarActualValue);

            intSizePositionsArray = arrPositions.GetSize();  

            if(intSizePositionsArray > 1)
            {
               //add to output array (if it is not already in the array)
               arrPositions = FindValue(arrDoubleValues, varvarActualValue);

               intSizePositionsArray = arrPositions.GetSize();  
             
               if(intSizePositionsArray == 0)
               {
                  arrDoubleValues.AddAsLast(varvarActualValue);
               }
            }
         }

         //return 
         HSLExtensions::Framework::Trace::FunctionResultArrayTrace(strFunctionName, arrDoubleValues);
         return(arrDoubleValues);
      }

      //---------------------------------------------------------
      // Compares the two arrays 
      // - the first array contains the expected values and the second array the actual values
      // - if both arrays contains the same values, the function will return 'true' and the output arrays are empty
      // - if the arrays contains different values, the function will retturn 'false' and the output array are filled
      //      
      // [in] i_arrExpectedValues           - array with expected values
      // [in] i_arrActualValues              - array with actual value
      // [in] o_arrMissingValues         - array with values which are expected but not found in the actual values
      // [in] o_arrNotExpectedValues        - array with values which are found but not expected
      // [return] 'true' if the arrays have same content, otherwise 'false'
      //---------------------------------------------------------
      function CompareArrays(
                  variable i_arrExpectedValues[],
                  variable i_arrActualValues[],
                  variable& o_arrMissingValues[],
                  variable& o_arrNotExpectedValues[] ) variable
      {
         variable strFunctionName(GetFunctionName());
         variable varValue;
         variable intSize;
         variable i;
         variable arrPositions[];
         variable varActualValue;
         variable blnReturnValue;

         //init
         o_arrMissingValues.SetSize(0);
         o_arrNotExpectedValues.SetSize(0);

         //trace input
         HSLExtensions::Framework::Trace::FunctionInputArrayTrace(strFunctionName, "i_arrExpectedValues", i_arrExpectedValues);  
         HSLExtensions::Framework::Trace::FunctionInputArrayTrace(strFunctionName, "i_arrActualValues", i_arrActualValues);  

         //search all missing values (which are in expected array but not in actual array)
         intSize = i_arrExpectedValues.GetSize();

         for(i=0; i<intSize; i++)
         {
            varActualValue = i_arrExpectedValues.GetAt(i);

            if(ContainsValue(i_arrActualValues, varActualValue) == hslFalse)
            {
               //add to missing values (if it is not already in the array)
               arrPositions = FindValue(o_arrMissingValues, varActualValue);

               if(arrPositions.GetSize() == 0)
               {
                  o_arrMissingValues.AddAsLast(varActualValue);
               }
            }           
         }

         //search all not expected values (which are in actual array but not in expected array)
         intSize = i_arrActualValues.GetSize();

         for(i=0; i<intSize; i++)
         {
            varActualValue = i_arrActualValues.GetAt(i);

            if(ContainsValue(i_arrExpectedValues, varActualValue) == hslFalse)
            {
               //add to not expected values (if it is not already in the array)
               arrPositions = FindValue(o_arrNotExpectedValues, varActualValue);

               if(arrPositions.GetSize() == 0)
               {
                  o_arrNotExpectedValues.AddAsLast(varActualValue);
               }
            }           
         }

         //calculate return value
         blnReturnValue = hslTrue;

         if(o_arrMissingValues.GetSize() > 0) 
         {
            blnReturnValue = hslFalse;
         }

         if(o_arrNotExpectedValues.GetSize() > 0) 
         {
            blnReturnValue = hslFalse;
         }         

         //return
         HSLExtensions::Framework::Trace::FunctionOutputArrayTrace(strFunctionName, "o_arrMissingValues", o_arrMissingValues);
         HSLExtensions::Framework::Trace::FunctionOutputArrayTrace(strFunctionName, "o_arrNotExpectedValues", o_arrNotExpectedValues);
         HSLExtensions::Framework::Trace::FunctionResultParameterTrace(strFunctionName, blnReturnValue);
         return(blnReturnValue);
      }

      //---------------------------------------------------------
      // Sorts the array values
      // NOTE: all values of the array must have the same type
      // NOTE: sorting algorithm: shakersort
      //
      // [in] i_arrValues           - array with values
      // [in] i_intSortMode           - sort mode (see enum SortMode)
      // [out] o_bSuccessfulSorted  - 'true' if the array could be sorted, otherwise 'false'
      // [return] sorted array
      //---------------------------------------------------------
      function Sort(variable i_arrValues[], variable i_intSortMode, variable& o_bSuccessfulSorted) variable[]
      {
         variable strFunctionName(GetFunctionName());
         variable intSize;
         variable intSizeHalf;

         variable arrSortedValues[];

         variable blnInputError;
         variable blnValidArrayType;

         variable i,k;
         variable blnChanged;
         variable blnUpwards;

         variable varValueA;
         variable varValueB;

         //init
         arrSortedValues.SetSize(0);
         o_bSuccessfulSorted = hslFalse;
         
         //trace input
         HSLExtensions::Framework::Trace::FunctionInputArrayTrace(strFunctionName, "i_arrValues", i_arrValues);
         HSLExtensions::Framework::Trace::FunctionInputParameterTrace(strFunctionName, "i_intSortMode", i_intSortMode);

         //empty array or array with only one value
         intSize = i_arrValues.GetSize();

         if(intSize == 0)
         {
            arrSortedValues = Copy(i_arrValues);
            o_bSuccessfulSorted = hslTrue;

            HSLExtensions::Framework::Trace::FunctionOutputParameterTrace(strFunctionName, "o_bSuccessfulSorted", o_bSuccessfulSorted);
            HSLExtensions::Framework::Trace::FunctionResultArrayTrace(strFunctionName, arrSortedValues);
            return(arrSortedValues);
         }

         //check input - sort mode
         blnInputError = hslFalse;

         if(HSLExtensions::Framework::Types::IsInteger(i_intSortMode) == hslFalse)
         {
            HSLExtensions::Framework::Trace::ParameterTypeErrorTrace(strFunctionName, HSLExtensions::Framework::Enumerators::Type::Integer, i_intSortMode);
            blnInputError = hslTrue;
         }
         else
         {
            if( (i_intSortMode != HSLExtensions::Framework::Enumerators::SortMode::Ascending) && 
                (i_intSortMode != HSLExtensions::Framework::Enumerators::SortMode::Descending) )
            {
               HSLExtensions::Framework::Trace::ParameterOutOfRangeErrorTrace(strFunctionName, "i_intSortMode", i_intSortMode);
               blnInputError = hslTrue;
            }
         }

         //check input - array type
         blnValidArrayType = hslFalse;

         if(blnInputError == hslFalse)
         {
            if(HSLExtensions::Framework::Types::IsStringArray(i_arrValues) == hslTrue)
            {
               blnValidArrayType = hslTrue;
            }
            else if(HSLExtensions::Framework::Types::IsIntegerArray(i_arrValues) == hslTrue)
            {
               blnValidArrayType = hslTrue;
            }
            else if(HSLExtensions::Framework::Types::IsFloatArray(i_arrValues) == hslTrue)
            {
               blnValidArrayType = hslTrue;
            }
            else if(HSLExtensions::Framework::Types::IsBooleanArray(i_arrValues) == hslTrue)
            {
               blnValidArrayType = hslTrue;
            }
         
            if(blnValidArrayType == hslFalse)
            {
               HSLExtensions::Framework::Trace::ErrorTrace(strFunctionName, "the array contains values of different types");
               blnInputError = hslTrue;
            }
         }

         //check input - return on error
         if(blnInputError == hslTrue)
         {
            arrSortedValues = Copy(i_arrValues);
            o_bSuccessfulSorted = hslFalse;

            HSLExtensions::Framework::Trace::FunctionOutputParameterTrace(strFunctionName, "o_bSuccessfulSorted", o_bSuccessfulSorted);
            HSLExtensions::Framework::Trace::FunctionResultArrayTrace(strFunctionName, arrSortedValues);
            return(arrSortedValues);
         }

         //sort - shakersort
         blnChanged = hslTrue;
         blnUpwards = hslTrue;
         arrSortedValues = Copy(i_arrValues);
    
         while (blnChanged == hslTrue)
         {
            blnChanged = hslFalse;

            if (blnUpwards) //sort upwards
            {
               blnUpwards = hslFalse;
               
               for (i=1; i<intSize; i++)
               {
                  varValueA = arrSortedValues.GetAt(i - 1);
                  varValueB = arrSortedValues.GetAt(i);
                  
                  if( ( (varValueA > varValueB) && (i_intSortMode == HSLExtensions::Framework::Enumerators::SortMode::Ascending) ) ||
                      ( (varValueA < varValueB) && (i_intSortMode == HSLExtensions::Framework::Enumerators::SortMode::Descending) ) )
                  {
                     arrSortedValues.SetAt(i - 1, varValueB);
                     arrSortedValues.SetAt(i, varValueA);
                     blnChanged = hslTrue;
                  }
               }
            }
            else //sort downwards
            {
               blnUpwards = hslTrue;
               
               for (i=intSize -1; i>0; i--)
               {
                  varValueA = arrSortedValues.GetAt(i - 1);
                  varValueB = arrSortedValues.GetAt(i);
                  
                  if( ( (varValueA > varValueB) && (i_intSortMode == HSLExtensions::Framework::Enumerators::SortMode::Ascending) ) ||
                      ( (varValueA < varValueB) && (i_intSortMode == HSLExtensions::Framework::Enumerators::SortMode::Descending) ) )
                  {
                     arrSortedValues.SetAt(i - 1, varValueB);
                     arrSortedValues.SetAt(i, varValueA);
                     blnChanged = hslTrue;
                  }
               }
            }
         }

         //return 
         o_bSuccessfulSorted = hslTrue;

         HSLExtensions::Framework::Trace::FunctionOutputParameterTrace(strFunctionName, "o_bSuccessfulSorted", o_bSuccessfulSorted);
         HSLExtensions::Framework::Trace::FunctionResultArrayTrace(strFunctionName, arrSortedValues);
         return(arrSortedValues);
      }

      //------------------------------------------------------
      // Initialies all values of the array by setting the given value
      //
      // [in] i_arrValues: array to initialze
      // [in] i_varValue: value which shall be set (all types are allowed)
      //------------------------------------------------------
      function InitializeAllValues(variable& io_arrValues[], variable i_varValue) void
      {
         variable strFunctionName(GetFunctionName());
         variable intSize;
         variable i;

         //trace input
         HSLExtensions::Framework::Trace::FunctionInputArrayTrace(strFunctionName, "i_arrValues", io_arrValues);
         HSLExtensions::Framework::Trace::FunctionInputParameterTrace(strFunctionName, "i_varValue", i_varValue);
         
         //set values
         intSize = io_arrValues.GetSize();

         for(i=0; i<intSize; i++)
         {
            io_arrValues.SetAt(i, i_varValue);
         }

         //trace output
         HSLExtensions::Framework::Trace::FunctionResultArrayTrace(strFunctionName, io_arrValues);
      }

   } //end Array
} //end HSLExtension

#endif //end __HSLEXTENSION_ARRAY__

// $$author=ofunke$$valid=1$$time=2013-01-31 10:55$$checksum=9de00429$$length=083$$